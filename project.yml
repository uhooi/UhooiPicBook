name: UhooiPicBook

options:
  bundleIdPrefix: com.theuhooi
  deploymentTarget:
    iOS: 13.0
  developmentLanguage: ja
  xcodeVersion: "11.6"
  carthageExecutablePath: unset SDKROOT && mint run Carthage/Carthage carthage

settings:
  configs:
    debug:
      DEBUG_INFORMATION_FORMAT: "dwarf-with-dsym"

targets:
  UhooiPicBook:
    type: application
    platform: iOS
    sources:
      - UhooiPicBook
      - path: "UhooiPicBook/Generated/MockResults.swift"
        optional: true
        type: file
      - path: "UhooiPicBook/Generated/R.generated.swift"
        optional: true
        type: file
    settings:
      base:
        MARKETING_VERSION: 1.1.0
        CURRENT_PROJECT_VERSION: 9
        DEVELOPMENT_TEAM: 47E56DYP3N
        INFOPLIST_FILE: UhooiPicBook/Info.plist
        CODE_SIGN_ENTITLEMENTS: UhooiPicBook/UhooiPicBook.entitlements
        OTHER_LDFLAGS: $(inherited) $(OTHER_LDFLAGS) -ObjC
        DEVELOPMENT_LANGUAGE: jp
    dependencies:
      - target: UhooiPicBookStickers
        embed: true
        codeSign: false
        buildPhase:
          copyFiles:
            destination: plugins
      - carthage: abseil
      - carthage: BoringSSL-GRPC
      - carthage: FIRAnalyticsConnector
      - carthage: FirebaseABTesting
      - carthage: FirebaseAnalytics
      - carthage: FirebaseCore
      - carthage: FirebaseCoreDiagnostics
      - carthage: FirebaseCrashlytics
      - carthage: FirebaseFirestore
      - carthage: FirebaseInstallations
      - carthage: FirebaseInstanceID
      - carthage: FirebaseMessaging
      - carthage: FirebasePerformance
      - carthage: FirebaseRemoteConfig
      - carthage: GoogleAppMeasurement
      - carthage: GoogleDataTransport
      - carthage: GoogleToolboxForMac
      - carthage: GoogleUtilities
      - carthage: gRPC-C++
      - carthage: gRPC-Core
      - carthage: GTMSessionFetcher
      - carthage: leveldb-library
      - carthage: nanopb
      - carthage: PromisesObjC
      - carthage: Protobuf
    preBuildScripts:
      - script: |
                "$PODS_ROOT/R.swift/rswift" generate "$SRCROOT/$TARGET_NAME/Generated/R.generated.swift"
        name: Generate Resources with R.swift
        inputFiles:
          - $TEMP_DIR/rswift-lastrun
        outputFiles:
          - $SRCROOT/$TARGET_NAME/Generated/R.generated.swift
      - script: |
                unset SDKROOT
                if which mint >/dev/null; then
                  rm -f $SRCROOT/$TARGET_NAME/Generated/MockResults.swift
                  mint run uber/mockolo mockolo --sourcedirs $SRCROOT/$TARGET_NAME --destination $SRCROOT/$TARGET_NAME/Generated/MockResults.swift --mock-final
                else
                  echo "warning: Mint not installed, download from https://github.com/yonaskolb/Mint"
                fi
        name: Generate Mocks with Mockolo
        outputFiles:
          - $SRCROOT/$TARGET_NAME/Generated/MockResults.swift
    postCompileScripts:
      - script: |
                unset SDKROOT
                if which mint >/dev/null; then
                  mint run swiftlint swiftlint autocorrect --format
                  mint run swiftlint swiftlint
                else
                  echo "warning: Mint not installed, download from https://github.com/yonaskolb/Mint"
                fi
        name: Run SwiftLint
      - script: |
                unset SDKROOT
                if ! which mint >/dev/null; then
                  echo "warning: Mint not installed, download from https://github.com/yonaskolb/Mint"
                  exit 0
                fi

                git_path=/usr/local/bin/git
                files=$($git_path diff --diff-filter=d --name-only -- "*.swift" "*.h" "*.m")
                if (test -z $files) || (test ${#files[@]} -eq 0); then
                  echo "no files changed."
                  exit 0
                fi

                options=""
                for file in $files
                do
                  options="$options $SRCROOT/$file"
                done

                mint run SpellChecker SpellChecker --yml $SRCROOT/spell-checker.yml -- $options
        name: Run SpellChecker
    postBuildScripts:
      - script: /bin/sh ./Scripts/FirebaseCrashlytics/run
        name: Run Firebase Crashlytics
        inputFiles:
          - $(SRCROOT)/$(BUILT_PRODUCTS_DIR)/$(INFOPLIST_PATH)

  UhooiPicBookTests:
    type: bundle.unit-test
    platform: iOS
    sources:
      - UhooiPicBookTests
    settings:
      base:
        INFOPLIST_FILE: UhooiPicBookTests/Info.plist
    dependencies:
      - target: UhooiPicBook

  UhooiPicBookUITests:
    type: bundle.ui-testing
    platform: iOS
    sources:
      - UhooiPicBookUITests
    settings:
      base:
        INFOPLIST_FILE: UhooiPicBookUITests/Info.plist
    dependencies:
      - target: UhooiPicBook

  UhooiPicBookStickers:
    type: app-extension.messages-sticker-pack
    platform: iOS
    sources:
      - UhooiPicBookStickers
    settings:
      base:
        ASSETCATALOG_COMPILER_APPICON_NAME: "iMessage App Icon"
        CLANG_ENABLE_OBJC_WEAK: YES
        CODE_SIGN_IDENTITY: "iPhone Developer"
        CODE_SIGN_STYLE: Automatic
        CURRENT_PROJECT_VERSION: 9
        DEBUG_INFORMATION_FORMAT: dwarf
        DEVELOPMENT_TEAM: 47E56DYP3N
        GCC_PREPROCESSOR_DEFINITIONS:
          - "DEBUG=1"
          - "$(inherited)"
        INFOPLIST_FILE: UhooiPicBookStickers/Info.plist
        IPHONEOS_DEPLOYMENT_TARGET: 11.0
        LD_RUNPATH_SEARCH_PATHS: ""
        MARKETING_VERSION: 1.1.0
        MTL_ENABLE_DEBUG_INFO: INCLUDE_SOURCE
        MTL_FAST_MATH: YES
        PRODUCT_BUNDLE_IDENTIFIER: com.theuhooi.UhooiPicBook.Stickers
        PRODUCT_NAME: "UhooiPicBookStickers"
        SKIP_INSTALL: YES

schemes:
  UhooiPicBook:
    build:
      targets:
        UhooiPicBook: all
    run:
      config: Debug
    test:
      config: Debug
      gatherCoverageData: true
      coverageTargets:
        - UhooiPicBook
      targets:
        - name: UhooiPicBookTests
          parallelizable: true
          randomExecutionOrder: true
        - name: UhooiPicBookUITests
          parallelizable: true
          randomExecutionOrder: true
    profile:
      config: Release
    analyze:
      config: Debug
    archive:
      config: Release

