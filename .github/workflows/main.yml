name: CI

on:
  push:
    branches:
      - main
      - develop
    paths-ignore:
      - Docs/**
      - README.md
      - LICENSE
      - Rambafile
  pull_request:
    branches:
      # - !main
      - develop
    paths-ignore:
      - Docs/**
      - README.md
      - LICENSE
      - Rambafile

env:
  DEVELOPER_DIR: /Applications/Xcode_12.4.app

jobs:
  build:
    runs-on: macOS-latest

    steps:
    # チェックアウト
    - uses: actions/checkout@v2

    # Bundlerで管理しているライブラリのキャッシュ
    - name: Cache Gems
      uses: actions/cache@v2
      with:
        path: vendor/bundle
        key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}
        restore-keys: |
          ${{ runner.os }}-gems-

    # Bundlerで管理しているライブラリのインストール
    - name: Install Bundled Gems
      run: make install-bundler

    # SwiftPMで管理しているCLIツールのキャッシュ
    - name: Cache CLI tools managed by SwiftPM
      uses: actions/cache@v2
      with:
        path: Tools/UhooiPicBookTools/.build
        key: ${{ runner.os }}-spm-${{ hashFiles('**/Tools/UhooiPicBookTools/Package.resolved') }}
        restore-keys: |
          ${{ runner.os }}-spm-

    - name: Cache Mockolo managed by SwiftPM
      uses: actions/cache@v2
      with:
        path: Tools/UhooiPicBookMockolo/.build
        key: ${{ runner.os }}-spm-${{ hashFiles('**/Tools/UhooiPicBookMockolo/Package.resolved') }}
        restore-keys: |
          ${{ runner.os }}-spm-

    # ライセンス情報の生成
    - name: Generate licenses
      run: make generate-licenses

    # プロジェクトファイルの生成
    - name: Generate Xcode project for develop
      run: make generate-xcodeproj-develop

    # SwiftPMで管理しているライブラリのキャッシュ
    - name: Cache libraries managed by SwiftPM
      uses: actions/cache@v2
      with:
        path: SourcePackages
        key: ${{ runner.os }}-swiftpm-${{ hashFiles('**/UhooiPicBook.xcodeproj/project.xcworkspace/xcshareddata/swiftpm/Package.resolved') }}
        restore-keys: |
          ${{ runner.os }}-swiftpm-

    # ビルド
    - name: Xcode build
      run: make build-debug

    # ビルドログのアップロード
    - name: Upload build log Artifact
      uses: actions/upload-artifact@v2
      if: failure()
      with:
        name: xcodebuild-logs
        path: xcodebuild_build.log
        if-no-files-found: ignore
        retention-days: 14

  test:
    runs-on: macOS-latest

    steps:
    # チェックアウト
    - uses: actions/checkout@v2

    # Bundlerで管理しているライブラリのキャッシュ
    - name: Cache Gems
      uses: actions/cache@v2
      with:
        path: vendor/bundle
        key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}
        restore-keys: |
          ${{ runner.os }}-gems-

    # Bundlerで管理しているライブラリのインストール
    - name: Install Bundled Gems
      run: make install-bundler

    # SwiftPMで管理しているCLIツールのキャッシュ
    - name: Cache CLI tools managed by SwiftPM
      uses: actions/cache@v2
      with:
        path: Tools/UhooiPicBookTools/.build
        key: ${{ runner.os }}-spm-${{ hashFiles('**/Tools/UhooiPicBookTools/Package.resolved') }}
        restore-keys: |
          ${{ runner.os }}-spm-

    - name: Cache Mockolo managed by SwiftPM
      uses: actions/cache@v2
      with:
        path: Tools/UhooiPicBookMockolo/.build
        key: ${{ runner.os }}-spm-${{ hashFiles('**/Tools/UhooiPicBookMockolo/Package.resolved') }}
        restore-keys: |
          ${{ runner.os }}-spm-

    # ライセンス情報の生成
    - name: Generate licenses
      run: make generate-licenses

    # プロジェクトファイルの生成
    - name: Generate Xcode project for develop
      run: make generate-xcodeproj-develop

    # SwiftPMで管理しているライブラリのキャッシュ
    - name: Cache libraries managed by SwiftPM
      uses: actions/cache@v2
      with:
        path: SourcePackages
        key: ${{ runner.os }}-swiftpm-${{ hashFiles('**/UhooiPicBook.xcodeproj/project.xcworkspace/xcshareddata/swiftpm/Package.resolved') }}
        restore-keys: |
          ${{ runner.os }}-swiftpm-

    # 単体テストの実行
    - name: Xcode test
      run: make test

    # 単体テストログのアップロード
    - name: Upload test log Artifact
      uses: actions/upload-artifact@v2
      if: failure()
      with:
        name: xcodebuild-logs
        path: xcodebuild_test.log
        if-no-files-found: ignore
        retention-days: 14

    # コードカバレッジをHTML形式で取得
    - name: Get code coverage for HTML
      run: make get-coverage-html

    # コードカバレッジのアップロード
    - name: Upload test results and code coverage Artifact
      uses: actions/upload-artifact@v2
      with:
        name: results
        path: |
          html_report/**/*
        if-no-files-found: warn
        retention-days: 14

    # コードカバレッジをCobertura形式で取得
    - name: Get code coverage for Cobertura
      run: make get-coverage-cobertura

    # コードカバレッジをCodecovへアップロード
    - name: Upload code coverage to Codecov
      run: make upload-coverage
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  info:
    runs-on: macOS-latest

    steps:
    # チェックアウト
    - uses: actions/checkout@v2

    # Xcodeのバージョン出力
    - name: Show Xcode version
      run: xcodebuild -version

    # Makeのバージョン出力
    - name: Show Make version
      run: make --version

    # Rubyのバージョン出力
    - name: Show Ruby version
      run: ruby --version

    # Bundlerのバージョン出力
    - name: Show Bundler version
      run: bundle version

    # Xcodeの一覧出力
    - name: Show Xcode list
      run: ls /Applications | grep 'Xcode'

    # 端末の一覧出力
    - name: Show devices
      run: make show-devices

